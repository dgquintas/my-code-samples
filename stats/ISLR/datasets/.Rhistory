data = matrix(data=c(0,3,0,2,0,0,0,1,3,0,1,2,-1,0,1,1,1,1), nrows=6, ncol=3, byrow=T)
data = matrix(data=c(0,3,0,2,0,0,0,1,3,0,1,2,-1,0,1,1,1,1), nrows=6, ncol=3, byrow=T)
data = matrix(data=c(0,3,0,2,0,0,0,1,3,0,1,2,-1,0,1,1,1,1), nrow=6, ncol=3, byrow=T)
View(data)
View(data)
t?
/
?t
t(data)
rowSums(data)
rowSums(data)^2
sqrt(rowSums(data)^2)
sqrt(rowSums(data^2))
sort(sqrt(rowSums(data^2)))
cwd()
cd
pwd()
cw
dir
getwd()
setwd("~/Dropbox/samples/stats/ISLR/datasets")
getwd()
college = read.csv("College.csv")
View(college)
View(college)
View(college)
View(college)
rownames(college)
college[,1]
rownames(college)=college[,1]
View(college)
View(college)
college
college[,1]
college = college[,-1]
View(college)
View(college)
fix(college)
summary(college)
pairs
? pairs
pairs(college[,1:10])
attach(college)
Private
Private = as.factor(Private)
plot(Private, Outstate)
? rep
nrow(college)
rep("No", nrow(college))
Elite = rep("No", nrow(college))
Elite[Top10perc > 50]
Elite[Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college
typeof(college)
typeof(get(college))
get(college)
? get
typeof(get("college"))
data.frame(college, Elite)
college = data.frame(college, Elite)
typeof(get("college"))
? data.frame
View(college)
View(college)
summary(college)
summary(Elite)
plot(Elite, Outstate)
hist
hist(college)
hist(Apps)
hist(Apps, breaks=10)
hist(Apps, breaks=2)
hist(Apps, breaks=20)
hist(Apps, breaks=15)
? par
par(mfrow=c(2,2))
hist(Apps)
hist(Accept)
hist(PhD)
hist(Expend)
college[which.max(college$Top10perc),] # what is the university with the most students in the top 10% of class
college[which.max(college$Top10perc),] # what is the university with the most students in the top 10% of class
? which
? which
? which.max
which.min(Accept)
college[which.min(Accept)]
college[which.min(Accept),]
college[which.min(Accept/Apps),]
college[which.min(Accept/Apps),row.name]
college[which.min(Accept/Apps),row.names]
college[which.min(Accept/Apps),1]
row.name(college[which.min(Accept/Apps),])
row.names(college, which.min(Accept/Apps))
row.names(college)[which.min(Accept/Apps)]
row.names(college)[which.max(Accept/Apps)]
Auto = read.table("Auto.data", header = T, na.strings = "?")
View(Auto)
View(Auto)
range(Auto)
range(Auto[-Auto$name])
Auto[Auto$name]
Auto[,1:8]
range(Auto[,1:8])
range(Auto[,1])
? range
range(Auto[,2])
range(Auto[,3])
Auto[,3]
? ~
;
pairs(Auto)
? pairs
pairs(Auto)
? na.omit
na.fail(Auto)
na.omit(Auto)
na.fail(na.omit(Auto))
summary(Auto)
? sapply
Auto = read.table("Auto.data", header = T, na.strings = "?")
Auto = na.omit(Auto)
summary(Auto)
qual_cols = c(2,7,8)
Auto[, -qual_cols]
sapply(Auto[, -qual_cols], range)
qual_cols = c(2,8,9)
sapply(Auto[, -qual_cols], range)
sapply(Auto[, -qual_cols], mean)
sapply(Auto[, -qual_cols], sd)
sapply(Auto[, -qual_cols], max)
sapply(Auto[, -qual_cols], min)
seq(10,85)
Auto[-(10:85), -qual_cols]
sapply(Auto[-(10:85), -qual_cols], mean)
lapply(Auto[-(10:85), -qual_cols], mean)
sapply(Auto[-(10:85), -qual_cols], mean)
pairs(Auto[,-qual_cols])
plot(Auto$year, Auto$mpg)
par(1)
plot(Auto$year, Auto$mpg)
? par
par(mfrows=1)
par(mfrow=1)
par(mfrow=c(1)
)
par(mfrow=c(1,1))
plot(Auto$year, Auto$mpg)
plot( as.factor(Auto$cylinders), Auto$mpg )
plot (as.factor(Auto$origin), Auto$mpg)
