from __future__ import print_function 
# For the final task, you must find all subsets of an array
#	where the largest number is the sum of the remaining numbers.
#	For example, for an input of:
#
#	(1, 2, 3, 4, 6)
#
#	the subsets would be
#
#	1 + 2 = 3
#	1 + 3 = 4
#	2 + 4 = 6
#	1 + 2 + 3 = 6

# idea: for a given v, there'll exist l1,l2 \in L such that
# v = l1+l2 iff v-l1 \in L. That is, by substracting a member
# of L from the value we're after, we end up with a search for
# the second summand. Note that this second summand may be 
# found either directly or in form of another sum (recursively)

def checkForValue(L, v):
  # checks for x,y \in L such that x+y=v
  # complexity in O(n lg(n)), as derived from
  # the O(lg n) of the search over an ordered list
  # and the T(n-1) nature of the recursion
  Li = list(L)
  res = []
  while len(Li):
    resi = []
    # let's start trying from the beginning
    vi = Li.pop(0)
    #if vj is in the list, vj+vi=v
    vj = v - vi
    #as L was sorted, if its smaller number is
    #already larger than vj, there's no way
    #the second summand can be found
    if Li[0] > vj: 
      break 
    if vj in Li:
      resi.append( [vi,vj] )
    #even if vj isn't in the list, there
    #may be number that add up to it
    for rec in checkForValue(Li, vj):
      #consider also the initial summand!
      rec.append(vi)
      resi.append(rec)
    res.extend( resi )
  return res

def f(L):
  res = []
  #applying checkForValue to each of the
  #elements 
  for v in L[:2:-1]: 
    #first two elements can't be the sum of anything else in the array if elements are unique
    Li = list(L)
    Li.remove(v)
    forV = checkForValue( Li, v )
    if forV:
      res.extend( forV )
  return res


L = (3, 4, 9, 14, 15, 19, 28, 37, 47, 50, 54, 56, 59, 61, 70, 73, 78, 81, 92, 95, 97, 99)

print(L)
res = f(L)
for r in res:
  print("Sum(%s) = %d" % (sorted(r), sum(r)))
print("Total subsets: ", len(res))

